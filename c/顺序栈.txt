#include<stdio.h>
#include<malloc.h>
#include<iostream>
using namespace std;
typedef int ElemType;
typedef struct
{
	ElemType data[10];
	int top;
}SqStack;
void InitStack(SqStack* &s)
{
	s = (SqStack*)malloc(sizeof(SqStack));
	s->top = -1;
}
bool StackEmpty(SqStack*& s)
{
	return(s->top == -1);
}
bool Push(SqStack*& s, ElemType e)
{
	if (s->top == 9)
		return false;
	s->top++;
	s->data[s->top] = e;
	return true;
}
bool Pop(SqStack*& s, ElemType& e)
{
	if (s->top == -1)
		return false;
	e = s->data[s->top];
	s->top--;
	return true;
}
bool GetTop(SqStack*& s, ElemType& e)
{
	if(s->top == -1)
        return false;
	e = s->data[s->top];
	return true;
}
void DestroyStack(SqStack*& s)
{
	free(s);
}
int main()
{
	int e,n;
	SqStack* S1;
	InitStack(S1);
	Push(S1, 1);
	Push(S1, 2);
	Push(S1, 3);
	cout << "初始栈区数据为1，2，3" << endl;
	for (int i = 1; i > 0; i++)
	{
		n = 0;
	    cout << "1.判断是否为空栈" << endl;
	    cout << "2.进栈" << endl;
	    cout << "3.出栈" << endl;
	    cout << "4.退出程序" << endl;
		cin >> n;
		if (n == 1)
		{
			int a=2;
			a = StackEmpty(S1);
			if (a == 0)
				cout << "栈未空"  << endl;
			if (a == 1)
				cout << "栈已空" << endl;
		}
		if (n == 2)
		{
			cout << "请输入进栈元素值：";
			cin >> e;
			Push(S1, e);
		}
		if (n == 3)
		{
			int a = 2;
			a=Pop(S1,e);
			if(a==1)
			    cout << "出栈元素为：" << e<<endl;
			if (a==0)
				cout << "栈已空" << endl;
		}
		if (n == 4)
			break;
	}
}